//
//  main.cpp
//  tires_maxXOR
//
//  Created by CodeBreaker on 15/02/25.
//

#include <iostream>
#include <vector>
#include "trie_h.h"
using namespace std;

int maxorOpt(vector<int> &A)
{
    auto maxor=0;
    auto msb = 0;
    for(auto i:A)
        for(auto b=0;b<32;b++)
            if((i>>b)&1) msb=max(msb,b);
    
    auto tt = Trie(msb);
    tt.make_trie(A);
    tNode *root = tt.getRoot();
    for(auto num:A)
    {
        auto ans=0;
        tNode* curr = root;
        for(int i = msb; i >= 0; i--) {
            int bit = (num >> i) & 1;
            // If opposite bit exists, take it
            if(curr->b[1-bit] != nullptr) {
                ans |= (1 << i);
                curr = curr->b[1-bit];
            }
            // Else take same bit
            else {
                curr = curr->b[bit];
            }
        }
        maxor=max(ans,maxor);
    }
    return maxor;
}

int maxXor(vector<int> &A)
{
    auto ans=0;
    auto m = A.size();
    for(auto i=0; i<m; i++ )
    {
        for(auto j=i+1;j<m;j++)
        {
            ans = max(ans, A[i]^A[j]);
        }
    }
    return ans;
}


int main(int argc, const char * argv[]) {
    // insert code here...
    std::cout << "Hello, Tries MAX XOR!\n";
    vector<int> A{3521,9668,7003,8867,9875,3917,5515,2012,750,9180,3772,5090,10067,600,8245,8133,8526,7438,7878,3120,8020,5394,5180,614,9838,353,7215,6604,2105,2374,5188,1918,4019,7876,333,7634,8715,5888,7839,6533,7237,7084,2704,4560,2213,443,2143,9080,1092,6206,9420,584,1014,5044,102,826,1219,7548,8577,1950,3224,6177,3628,144,6193,3784,728,6776,3150,1124,7914,3156,3701,3079,2502,8400,9295,1865,5506,5977,1365,213,4907,9332,7227,3853,8278,10034,1578,5335,800,4033,5164,7327,6094,5310,3914,2076,6580,2361,9658,9574,5656,9665,10026,2192,5701,6455,3580,241,2632,2501,8529,2817,6764,7847,1080,4388,5333,7717,663,8439,7405,3441,4219,8399,8471,7627,8835,9545,1191,1174,1613,317,10026,8463,2604,4290,5601,8948,471,5180,5108,4786,2405,585,828,2912,5074,8527,4377,6857,7656,9204,4977,5044,8830,7246,5861,4561,4508,655,8697,8529,8943,5178,3095,6684,7993,3106,9988,7146,4732,5769,3875,3874,4898,5984,8588,3537,3811,6060,6172,9244,9716,3136,3710,5082,2220,8962,1471,9803,4048,6849,993,8514,8154,2529,7644,7907,7150,7990,6775,7262,9745,9055,4635,1094,2545,1475,420,7511,1980,6233,2341,3707,3749,6871,9264,1074,8579,10071,7929,4146,9298,6345,9217,7363,6831,5648,5774,6605,3830,7575,2884,6283,9399,243,5169,5669,2919,7355,3284,584,4037,1096,1302,7283,410,7947,7340,4261,151,5443,608,19,2831,8397,5419,8652,9432,2080,1453,5317,4587,6685,5034,616,2403,6431,5491,4536,2632,594,8913,8684,6523,2092,6219,7887,310,8024,1301,4061,8870,7833,4807,7517,3085,8750,8995,1106,5818,6642,4789,4045,1303,5152,3062,7368,9222,1244,322,5410,8379,7939,5740,1127,3009,8462,5582,435,3069,8018,1800,5766,8190,9342,3618,2961,801,8239,3711,9564,2709,5831,8710,2275,6753,9468,6274,7338,625,3932,4388,1552,9995,9594,3262,8501,1659,8476,6719,5275,8784,5864,8838,43,9573,6010,9955,1003,9111,3602,8784,7019,7166,5782,8594,3527,1776,6553,1509,1650,488,9256,9543,9780,6552,7065,8408,619,4926,3396,1119,8339,1817,6899,6444,5687,9981,4729,9775,8036,5025,1028,953,938,2483,1931,4208,2222,6197,663,4646,203,9292,719,5017,9990,4665,2611,4439,9453,1860,3658,2993,4835,7833,6473,295,3767,2497,2381,8853,8426,4775,1919,715,870,7431,1712,4177,3383,744,2307,3514,2541,858,6727,199,8416,9238,1427,3087,2035,3361,7377,9554,5058,1819,5389,7341,5624,9680,7906,1262,3789,247,1281,9548,8789,6701,9381,2675,4456,3016,9595,4346,1454,2419,7746,9530,2405,6614,6242,8297,8447,9237,1578,4214,2317,475,7658,7562,2181,8324,6280,989,4281,9074,8850,179,1860,5089,3249,9145,9957,4560,2209,10046,9309,5492,7623,9620,8323,780,4350,2705,9872,8094,6363,2730,4002,5601,590,9358,6683,8271,5846,5366,2206,6019,2021,285,8645,3399,6373,9839,8241,1378,8616,982,6088,491,6402,10012,1073,1570,7671,7352,917,10063,382,847,4562,508,8106,6354,9054,2423,7341,1434,8765,8419,2530,6996,6008,7169,8233,2590,1304,6763,4071,9224,1078,3773,5979,5248,7667,5306,4425,2492,3945,1230,353,5285,1418,9584,5166,7438,3486,99,5763,5137,2412,2522,4136,4936,366,7627,57,3805,6806,6050,3084,3363,6165,6383,8179,169,1283,8258,4239,2464,5124,1612,1685,6639,3299,8836,6440,8711,8461,2297,4861,2018,959,3672,3840,6997,360,5572,2579,7480,2007,4803,2880,8208,1550,6148,5253,7442,9987,2439,4978,1757,4109,4441,2440,5315,697,606,5986,8379,8471,9801,3851,1575,4879,7905,5332,6719,2142,7475,5389,7344,1552,8825,104,4765,5016,1885};
    //vector<int> A{22,61,38,27,21,34,42,37,43};
    
//    Trie tt;
//    tt.make_trie(A);
//    tt.parseTrie();
//    
//    cout<<"O-"<<tt.search(0)<<endl;
//    cout<<"1-"<<tt.search(1)<<endl;
//    cout<<"2-"<<tt.search(2)<<endl;
//    cout<<"3-"<<tt.search(3)<<endl;
//    cout<<"4-"<<tt.search(4)<<endl;
//    cout<<"5-"<<tt.search(5)<<endl;
//    cout<<"6-"<<tt.search(6)<<endl;
//    cout<<"7-"<<tt.search(7)<<endl;
//    cout<<"8-"<<tt.search(8)<<endl;
    cout<<"Maxor : " << maxorOpt(A) <<endl;
    return 0;
}
